import static org.junit.Assert.*;

import org.junit.Test;


public class Stack1Test {
	
	@Test
	public void testConstructor(){
		Stack1[] stacks = new Stack1[3]; // this new just create an array
		
		for (int i=0; i<3; i++ ){
			stacks[i] = new Stack1();
		}
		assertEquals(3,Stack1.numOfStack);
		
		for (int i=0; i<3; i++){
			stacks[i] = null;
		}
		Stack1.clear();  // set nunOfStacks to 0
		assertEquals(0,Stack1.numOfStack);
	}

	@Test
	public void testPush() {
		Stack1[] stacks = new Stack1[3]; // this new just create an array
		
		for (int i=0; i<3; i++ ){
			stacks[i] = new Stack1();
		}
		
		
		for(int i=0; i<30; i++){
			int stackIndex = i/10;
			Integer item = new Integer(i);
			stacks[stackIndex].push(item);
		}
		
		for(int i=0; i<30; i++){
			assertEquals(i,((Integer)Stack1.getItem(i)).intValue());
		}
		
		for (int i=0; i<3; i++){
			stacks[i] = null;
		}
		Stack1.clear();
		
	}

	@Test
	public void testIsEmpty() {
		
		
	}

	@Test
	public void testIsFull() {
		
	}

	@Test
	public void testPop() {
		Stack1[] stacks = new Stack1[3]; // this new just create an array
		
		for (int i=0; i<3; i++ ){
			stacks[i] = new Stack1();
		}
		for(int i=0; i<30; i++){
			int stackIndex = i/10;
			Integer item = new Integer(i);
			stacks[stackIndex].push(item);
		}
		int i=10;
		while(i!=0){
			stacks[0].pop();
			i--;
		}
		assertEquals(true, stacks[0].isEmpty());
		
		Stack1.clear();
	}

	@Test
	public void testPeek() {
		
	}

}

//Stack1[] stacks = new Stack1[3];
//	final int stackSize = 10;
//for (int i=0; i<3; i++) stacks[i] = new Stack1();
///*
// * create three stacks:
// * stacks[0] = 0~9;
// * stacks[1] = 10~19;
// * stacks[2] = 20~29;
// */
//for (int i=0; i<30; i++){
//	int stackIndex = i /  stackSize;
//	stacks[stackIndex].push(new Integer(i));
//}
//
//System.out.println(((Integer)stacks[0].pop()).intValue());
//assertEquals(null, Stack1.array[9]);
//Stack1.clear();

//Stack1[] stacks = new Stack1[3];
//	final int stackSize = 10;
//for (int i=0; i<3; i++) stacks[i] = new Stack1();
///*
// * create three stacks:
// * stacks[0] = 0~9;
// * stacks[1] = 10~19;
// * stacks[2] = 20~29;
// */
//for (int i=0; i<30; i++){
//	int stackIndex = i /  stackSize;
//	stacks[stackIndex].push(new Integer(i));
//}
//for (int i=0; i<30; i++){
//	assertEquals(i, Stack1.array[i]);
//}
///*
// * delete stacks
// */
//for (int i=0; i<3; i++) stacks[i] = null;
//Stack1.clear();