import java.util.Vector;

public class Hanoi {
	public class Move {
		public int disk,start,end;
		public Move(int _disk, int _start, int _end) {
			disk = _disk;
			start = _start;
			end = _end;
		}
		public String toString(){
			return disk + "from " + start + "to " + end;
		}
	}

	private final int numOfDisks;
	private final Stack[] towers;
	private Vector<Move> solution;;
	
	public Hanoi() {
		numOfDisks = 3;
		towers = new Stack[3];
		for (int i = 0; i<3; i++){
			towers[i] = new Stack();
		}
		solution = new Vector<Move>();
		for (int i=numOfDisks-1; i>=0; i--){
			towers[0].push(new Integer(i));
		}
	}

	public void move(int num, int from, int to){
		if(num == 1) {
			Object disk = towers[from].pop();
			towers[to].push(disk);
			int diskNum = ((Integer)disk).intValue();
			solution.add(new Move(diskNum,from,to));
		} else {
			int temp = 3-from-to;
			move(num-1,from,temp);
			move(1,from,to);
			move(num-1,temp,to);
		}
	}
	
	public Vector<Move> getSolution(){
		move(numOfDisks,0,2);
		return solution;
	}
	
}
